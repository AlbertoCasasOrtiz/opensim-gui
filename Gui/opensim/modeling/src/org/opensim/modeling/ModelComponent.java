/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class ModelComponent extends OpenSimObject {
  private long swigCPtr;

  public ModelComponent(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.ModelComponent_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(ModelComponent obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_ModelComponent(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    opensimModelJNI.ModelComponent_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    opensimModelJNI.ModelComponent_change_ownership(this, swigCPtr, true);
  }

  public static ModelComponent safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.ModelComponent_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new ModelComponent(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject); else opensimModelJNI.ModelComponent_assignSwigExplicitModelComponent(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimModelJNI.ModelComponent_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimModelJNI.ModelComponent_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new ModelComponent(cPtr, false);
  }

  public String getConcreteClassName() {
    return opensimModelJNI.ModelComponent_getConcreteClassName(swigCPtr, this);
  }

  public ModelComponent() {
    this(opensimModelJNI.new_ModelComponent__SWIG_0(), true);
    opensimModelJNI.ModelComponent_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public ModelComponent(String aFileName, boolean aUpdateFromXMLNode) throws java.io.IOException {
    this(opensimModelJNI.new_ModelComponent__SWIG_1(aFileName, aUpdateFromXMLNode), true);
    opensimModelJNI.ModelComponent_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public ModelComponent(String aFileName) throws java.io.IOException {
    this(opensimModelJNI.new_ModelComponent__SWIG_2(aFileName), true);
    opensimModelJNI.ModelComponent_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public ModelComponent(SWIGTYPE_p_SimTK__Xml__Element aNode) {
    this(opensimModelJNI.new_ModelComponent__SWIG_3(SWIGTYPE_p_SimTK__Xml__Element.getCPtr(aNode)), true);
    opensimModelJNI.ModelComponent_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public ModelComponent(ModelComponent source) {
    this(opensimModelJNI.new_ModelComponent__SWIG_4(ModelComponent.getCPtr(source), source), true);
    opensimModelJNI.ModelComponent_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public Model getModel() {
    return new Model(opensimModelJNI.ModelComponent_getModel(swigCPtr, this), false);
  }

  public Model updModel() {
    return new Model(opensimModelJNI.ModelComponent_updModel(swigCPtr, this), false);
  }

  public void updateDisplayer(State s) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_updateDisplayer(swigCPtr, this, State.getCPtr(s), s); else opensimModelJNI.ModelComponent_updateDisplayerSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(s), s);
  }

  public int getNumStateVariables() {
    return (getClass() == ModelComponent.class) ? opensimModelJNI.ModelComponent_getNumStateVariables(swigCPtr, this) : opensimModelJNI.ModelComponent_getNumStateVariablesSwigExplicitModelComponent(swigCPtr, this);
  }

  public ArrayStr getStateVariableNames() {
    return new ArrayStr((getClass() == ModelComponent.class) ? opensimModelJNI.ModelComponent_getStateVariableNames(swigCPtr, this) : opensimModelJNI.ModelComponent_getStateVariableNamesSwigExplicitModelComponent(swigCPtr, this), true);
  }

  public int getStateVariableSystemIndex(String stateVariableName) {
    return (getClass() == ModelComponent.class) ? opensimModelJNI.ModelComponent_getStateVariableSystemIndex(swigCPtr, this, stateVariableName) : opensimModelJNI.ModelComponent_getStateVariableSystemIndexSwigExplicitModelComponent(swigCPtr, this, stateVariableName);
  }

  public int getModelingOption(State state, String name) {
    return opensimModelJNI.ModelComponent_getModelingOption(swigCPtr, this, State.getCPtr(state), state, name);
  }

  public void setModelingOption(State state, String name, int flag) {
    opensimModelJNI.ModelComponent_setModelingOption(swigCPtr, this, State.getCPtr(state), state, name, flag);
  }

  public double getStateVariable(State state, String name) {
    return opensimModelJNI.ModelComponent_getStateVariable(swigCPtr, this, State.getCPtr(state), state, name);
  }

  public void setStateVariable(State state, String name, double value) {
    opensimModelJNI.ModelComponent_setStateVariable(swigCPtr, this, State.getCPtr(state), state, name, value);
  }

  public double getDiscreteVariable(State state, String name) {
    return opensimModelJNI.ModelComponent_getDiscreteVariable(swigCPtr, this, State.getCPtr(state), state, name);
  }

  public void setDiscreteVariable(State state, String name, double value) {
    opensimModelJNI.ModelComponent_setDiscreteVariable(swigCPtr, this, State.getCPtr(state), state, name, value);
  }

  public void markCacheVariableValid(State state, String name) {
    opensimModelJNI.ModelComponent_markCacheVariableValid(swigCPtr, this, State.getCPtr(state), state, name);
  }

  public void markCacheVariableInvalid(State state, String name) {
    opensimModelJNI.ModelComponent_markCacheVariableInvalid(swigCPtr, this, State.getCPtr(state), state, name);
  }

  public boolean isCacheVariableValid(State state, String name) {
    return opensimModelJNI.ModelComponent_isCacheVariableValid(swigCPtr, this, State.getCPtr(state), state, name);
  }

  protected void connectToModel(Model model) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_connectToModel(swigCPtr, this, Model.getCPtr(model), model); else opensimModelJNI.ModelComponent_connectToModelSwigExplicitModelComponent(swigCPtr, this, Model.getCPtr(model), model);
  }

  protected void addToSystem(SWIGTYPE_p_SimTK__MultibodySystem system) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_addToSystem(swigCPtr, this, SWIGTYPE_p_SimTK__MultibodySystem.getCPtr(system)); else opensimModelJNI.ModelComponent_addToSystemSwigExplicitModelComponent(swigCPtr, this, SWIGTYPE_p_SimTK__MultibodySystem.getCPtr(system));
  }

  protected void initStateFromProperties(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_initStateFromProperties(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_initStateFromPropertiesSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void setPropertiesFromState(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_setPropertiesFromState(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_setPropertiesFromStateSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected Vector computeStateVariableDerivatives(State s) {
    return new Vector((getClass() == ModelComponent.class) ? opensimModelJNI.ModelComponent_computeStateVariableDerivatives(swigCPtr, this, State.getCPtr(s), s) : opensimModelJNI.ModelComponent_computeStateVariableDerivativesSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(s), s), true);
  }

  public void generateDecorations(boolean fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_generateDecorations(swigCPtr, this, fixed, ModelDisplayHints.getCPtr(hints), hints, State.getCPtr(state), state, ArrayDecorativeGeometry.getCPtr(appendToThis), appendToThis); else opensimModelJNI.ModelComponent_generateDecorationsSwigExplicitModelComponent(swigCPtr, this, fixed, ModelDisplayHints.getCPtr(hints), hints, State.getCPtr(state), state, ArrayDecorativeGeometry.getCPtr(appendToThis), appendToThis);
  }

  protected void realizeTopology(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeTopology(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeTopologySwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeModel(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeModel(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeModelSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeInstance(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeInstance(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeInstanceSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeTime(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeTime(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeTimeSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizePosition(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizePosition(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizePositionSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeVelocity(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeVelocity(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeVelocitySwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeDynamics(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeDynamics(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeDynamicsSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeAcceleration(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeAcceleration(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeAccelerationSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

  protected void realizeReport(State state) {
    if (getClass() == ModelComponent.class) opensimModelJNI.ModelComponent_realizeReport(swigCPtr, this, State.getCPtr(state), state); else opensimModelJNI.ModelComponent_realizeReportSwigExplicitModelComponent(swigCPtr, this, State.getCPtr(state), state);
  }

}
