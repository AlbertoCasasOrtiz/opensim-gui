/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class MarkersReference extends ReferenceVec3 {
  private long swigCPtr;

  public MarkersReference(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.MarkersReference_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(MarkersReference obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_MarkersReference(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static MarkersReference safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.MarkersReference_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new MarkersReference(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimModelJNI.MarkersReference_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimModelJNI.MarkersReference_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimModelJNI.MarkersReference_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MarkersReference(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimModelJNI.MarkersReference_getConcreteClassName(swigCPtr, this);
  }

  public MarkersReference() {
    this(opensimModelJNI.new_MarkersReference__SWIG_0(), true);
  }

  public MarkersReference(String filename, Units modelUnits) {
    this(opensimModelJNI.new_MarkersReference__SWIG_1(filename, Units.getCPtr(modelUnits), modelUnits), true);
  }

  public MarkersReference(String filename) {
    this(opensimModelJNI.new_MarkersReference__SWIG_2(filename), true);
  }

  public MarkersReference(MarkerData aMarkerData, SetMarkerWeights aMarkerWeightSet) {
    this(opensimModelJNI.new_MarkersReference__SWIG_3(MarkerData.getCPtr(aMarkerData), aMarkerData, SetMarkerWeights.getCPtr(aMarkerWeightSet), aMarkerWeightSet), true);
  }

  public MarkersReference(MarkerData aMarkerData) {
    this(opensimModelJNI.new_MarkersReference__SWIG_4(MarkerData.getCPtr(aMarkerData), aMarkerData), true);
  }

  public void copyData(MarkersReference aRef) {
    opensimModelJNI.MarkersReference_copyData(swigCPtr, this, MarkersReference.getCPtr(aRef), aRef);
  }

  public void loadMarkersFile(String markerFile, Units modelUnits) {
    opensimModelJNI.MarkersReference_loadMarkersFile__SWIG_0(swigCPtr, this, markerFile, Units.getCPtr(modelUnits), modelUnits);
  }

  public void loadMarkersFile(String markerFile) {
    opensimModelJNI.MarkersReference_loadMarkersFile__SWIG_1(swigCPtr, this, markerFile);
  }

  public int getNumRefs() {
    return opensimModelJNI.MarkersReference_getNumRefs(swigCPtr, this);
  }

  public Vec2 getValidTimeRange() {
    return new Vec2(opensimModelJNI.MarkersReference_getValidTimeRange(swigCPtr, this), true);
  }

  public SimTKArrayString getNames() {
    return new SimTKArrayString(opensimModelJNI.MarkersReference_getNames(swigCPtr, this), false);
  }

  public void getValues(State s, SimTKArrayVec3 values) {
    opensimModelJNI.MarkersReference_getValues(swigCPtr, this, State.getCPtr(s), s, SimTKArrayVec3.getCPtr(values), values);
  }

  public void getSpeedValues(State s, SimTKArrayVec3 speedValues) {
    opensimModelJNI.MarkersReference_getSpeedValues(swigCPtr, this, State.getCPtr(s), s, SimTKArrayVec3.getCPtr(speedValues), speedValues);
  }

  public void getAccelerationValues(State s, SimTKArrayVec3 accValues) {
    opensimModelJNI.MarkersReference_getAccelerationValues(swigCPtr, this, State.getCPtr(s), s, SimTKArrayVec3.getCPtr(accValues), accValues);
  }

  public void getWeights(State s, SimTKArrayDouble weights) {
    opensimModelJNI.MarkersReference_getWeights(swigCPtr, this, State.getCPtr(s), s, SimTKArrayDouble.getCPtr(weights), weights);
  }

  public double getSamplingFrequency() {
    return opensimModelJNI.MarkersReference_getSamplingFrequency(swigCPtr, this);
  }

  public SetMarkerWeights updMarkerWeightSet() {
    return new SetMarkerWeights(opensimModelJNI.MarkersReference_updMarkerWeightSet(swigCPtr, this), false);
  }

  public void setMarkerWeightSet(SetMarkerWeights markerWeights) {
    opensimModelJNI.MarkersReference_setMarkerWeightSet(swigCPtr, this, SetMarkerWeights.getCPtr(markerWeights), markerWeights);
  }

  public void setDefaultWeight(double weight) {
    opensimModelJNI.MarkersReference_setDefaultWeight(swigCPtr, this, weight);
  }

}
