/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class opensimModel implements opensimModelConstants {
  public static void setOpenSimVersion(String value) {
    opensimModelJNI.OpenSimVersion_set(value);
  }

  public static String getOpenSimVersion() {
    return opensimModelJNI.OpenSimVersion_get();
  }

  public static String GetVersionAndDate() {
    return opensimModelJNI.GetVersionAndDate();
  }

  public static String GetVersion() {
    return opensimModelJNI.GetVersion();
  }

  public static String GetOSInfoVerbose() {
    return opensimModelJNI.GetOSInfoVerbose();
  }

  public static String GetOSInfo() {
    return opensimModelJNI.GetOSInfo();
  }

  public static String GetCompilerVersion() {
    return opensimModelJNI.GetCompilerVersion();
  }

  public static SpatialVec findRelativeVelocity(SWIGTYPE_p_Transform X_FA, SpatialVec V_FA, SWIGTYPE_p_Transform X_FB, SpatialVec V_FB) {
    return new SpatialVec(opensimModelJNI.findRelativeVelocity(SWIGTYPE_p_Transform.getCPtr(X_FA), SpatialVec.getCPtr(V_FA), V_FA, SWIGTYPE_p_Transform.getCPtr(X_FB), SpatialVec.getCPtr(V_FB), V_FB), true);
  }

  public static SpatialVec findRelativeVelocityInF(Vec3 p_AB_F, SpatialVec V_FA, SpatialVec V_FB) {
    return new SpatialVec(opensimModelJNI.findRelativeVelocityInF(Vec3.getCPtr(p_AB_F), p_AB_F, SpatialVec.getCPtr(V_FA), V_FA, SpatialVec.getCPtr(V_FB), V_FB), true);
  }

  public static SpatialVec findRelativeAcceleration(SWIGTYPE_p_Transform X_FA, SpatialVec V_FA, SpatialVec A_FA, SWIGTYPE_p_Transform X_FB, SpatialVec V_FB, SpatialVec A_FB) {
    return new SpatialVec(opensimModelJNI.findRelativeAcceleration(SWIGTYPE_p_Transform.getCPtr(X_FA), SpatialVec.getCPtr(V_FA), V_FA, SpatialVec.getCPtr(A_FA), A_FA, SWIGTYPE_p_Transform.getCPtr(X_FB), SpatialVec.getCPtr(V_FB), V_FB, SpatialVec.getCPtr(A_FB), A_FB), true);
  }

  public static SpatialVec findRelativeAccelerationInF(Vec3 p_AB_F, SpatialVec V_FA, SpatialVec A_FA, SpatialVec V_FB, SpatialVec A_FB) {
    return new SpatialVec(opensimModelJNI.findRelativeAccelerationInF(Vec3.getCPtr(p_AB_F), p_AB_F, SpatialVec.getCPtr(V_FA), V_FA, SpatialVec.getCPtr(A_FA), A_FA, SpatialVec.getCPtr(V_FB), V_FB, SpatialVec.getCPtr(A_FB), A_FB), true);
  }

  public static SpatialVec reverseRelativeVelocity(SWIGTYPE_p_Transform X_AB, SpatialVec V_AB) {
    return new SpatialVec(opensimModelJNI.reverseRelativeVelocity(SWIGTYPE_p_Transform.getCPtr(X_AB), SpatialVec.getCPtr(V_AB), V_AB), true);
  }

  public static SpatialVec reverseRelativeVelocityInA(SWIGTYPE_p_Transform X_AB, SpatialVec V_AB) {
    return new SpatialVec(opensimModelJNI.reverseRelativeVelocityInA(SWIGTYPE_p_Transform.getCPtr(X_AB), SpatialVec.getCPtr(V_AB), V_AB), true);
  }

  public static SpatialVec shiftVelocityBy(SpatialVec V_AB, Vec3 r_A) {
    return new SpatialVec(opensimModelJNI.shiftVelocityBy(SpatialVec.getCPtr(V_AB), V_AB, Vec3.getCPtr(r_A), r_A), true);
  }

  public static SpatialVec shiftVelocityFromTo(SpatialVec V_A_BP, Vec3 fromP_A, Vec3 toQ_A) {
    return new SpatialVec(opensimModelJNI.shiftVelocityFromTo(SpatialVec.getCPtr(V_A_BP), V_A_BP, Vec3.getCPtr(fromP_A), fromP_A, Vec3.getCPtr(toQ_A), toQ_A), true);
  }

  public static SpatialVec shiftForceBy(SpatialVec F_AP, Vec3 r_A) {
    return new SpatialVec(opensimModelJNI.shiftForceBy(SpatialVec.getCPtr(F_AP), F_AP, Vec3.getCPtr(r_A), r_A), true);
  }

  public static SpatialVec shiftForceFromTo(SpatialVec F_AP, Vec3 fromP_A, Vec3 toQ_A) {
    return new SpatialVec(opensimModelJNI.shiftForceFromTo(SpatialVec.getCPtr(F_AP), F_AP, Vec3.getCPtr(fromP_A), fromP_A, Vec3.getCPtr(toQ_A), toQ_A), true);
  }

  public static SpatialVec shiftAccelerationBy(SpatialVec A_AB, Vec3 w_AB, Vec3 r_A) {
    return new SpatialVec(opensimModelJNI.shiftAccelerationBy(SpatialVec.getCPtr(A_AB), A_AB, Vec3.getCPtr(w_AB), w_AB, Vec3.getCPtr(r_A), r_A), true);
  }

  public static SpatialVec shiftAccelerationFromTo(SpatialVec A_A_BP, Vec3 w_AB, Vec3 fromP_A, Vec3 toQ_A) {
    return new SpatialVec(opensimModelJNI.shiftAccelerationFromTo(SpatialVec.getCPtr(A_A_BP), A_A_BP, Vec3.getCPtr(w_AB), w_AB, Vec3.getCPtr(fromP_A), fromP_A, Vec3.getCPtr(toQ_A), toQ_A), true);
  }

  public static void SimTK_version_SimTKcommon(SWIGTYPE_p_int major, SWIGTYPE_p_int minor, SWIGTYPE_p_int build) {
    opensimModelJNI.SimTK_version_SimTKcommon(SWIGTYPE_p_int.getCPtr(major), SWIGTYPE_p_int.getCPtr(minor), SWIGTYPE_p_int.getCPtr(build));
  }

  public static void SimTK_about_SimTKcommon(String key, int maxlen, String value) {
    opensimModelJNI.SimTK_about_SimTKcommon(key, maxlen, value);
  }

  public static boolean canStoreInNonnegativeInt(boolean arg0) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_0(arg0);
  }

  public static boolean canStoreInNonnegativeInt(char c) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_1(c);
  }

  public static boolean canStoreInNonnegativeInt(short arg0) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_2(arg0);
  }

  public static boolean canStoreInNonnegativeInt(byte c) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_3(c);
  }

  public static boolean canStoreInNonnegativeInt(int arg0) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_5(arg0);
  }

  public static boolean canStoreInNonnegativeInt(long l) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_8(l);
  }

  public static boolean canStoreInNonnegativeInt(java.math.BigInteger u) {
    return opensimModelJNI.canStoreInNonnegativeInt__SWIG_11(u);
  }

  public static boolean isSizeInRange(char sz, char mx) {
    return opensimModelJNI.isSizeInRange__SWIG_0(sz, mx);
  }

  public static boolean isSizeInRange(byte sz, byte mx) {
    return opensimModelJNI.isSizeInRange__SWIG_1(sz, mx);
  }

  public static boolean isSizeInRange(short sz, short mx) {
    return opensimModelJNI.isSizeInRange__SWIG_2(sz, mx);
  }

  public static boolean isSizeInRange(int sz, int mx) {
    return opensimModelJNI.isSizeInRange__SWIG_3(sz, mx);
  }

  public static boolean isSizeInRange(long sz, long mx) {
    return opensimModelJNI.isSizeInRange__SWIG_5(sz, mx);
  }

  public static boolean isSizeInRange(java.math.BigInteger sz, java.math.BigInteger mx) {
    return opensimModelJNI.isSizeInRange__SWIG_10(sz, mx);
  }

  public static boolean isIndexInRange(char ix, char sz) {
    return opensimModelJNI.isIndexInRange__SWIG_0(ix, sz);
  }

  public static boolean isIndexInRange(byte ix, byte sz) {
    return opensimModelJNI.isIndexInRange__SWIG_1(ix, sz);
  }

  public static boolean isIndexInRange(short ix, short sz) {
    return opensimModelJNI.isIndexInRange__SWIG_2(ix, sz);
  }

  public static boolean isIndexInRange(int ix, int sz) {
    return opensimModelJNI.isIndexInRange__SWIG_3(ix, sz);
  }

  public static boolean isIndexInRange(long ix, long sz) {
    return opensimModelJNI.isIndexInRange__SWIG_5(ix, sz);
  }

  public static boolean isIndexInRange(java.math.BigInteger ix, java.math.BigInteger sz) {
    return opensimModelJNI.isIndexInRange__SWIG_10(ix, sz);
  }

  public static boolean isNonnegative(boolean arg0) {
    return opensimModelJNI.isNonnegative__SWIG_0(arg0);
  }

  public static boolean isNonnegative(char n) {
    return opensimModelJNI.isNonnegative__SWIG_1(n);
  }

  public static boolean isNonnegative(byte n) {
    return opensimModelJNI.isNonnegative__SWIG_2(n);
  }

  public static boolean isNonnegative(short n) {
    return opensimModelJNI.isNonnegative__SWIG_3(n);
  }

  public static boolean isNonnegative(int n) {
    return opensimModelJNI.isNonnegative__SWIG_4(n);
  }

  public static boolean isNonnegative(long n) {
    return opensimModelJNI.isNonnegative__SWIG_6(n);
  }

  public static boolean isNonnegative(java.math.BigInteger arg0) {
    return opensimModelJNI.isNonnegative__SWIG_11(arg0);
  }

  public static int getInvalidIndex() {
    return opensimModelJNI.InvalidIndex_get();
  }

  public static Vec3 getBlack() {
    long cPtr = opensimModelJNI.Black_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getGray() {
    long cPtr = opensimModelJNI.Gray_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getRed() {
    long cPtr = opensimModelJNI.Red_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getGreen() {
    long cPtr = opensimModelJNI.Green_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getBlue() {
    long cPtr = opensimModelJNI.Blue_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getYellow() {
    long cPtr = opensimModelJNI.Yellow_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getOrange() {
    long cPtr = opensimModelJNI.Orange_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getMagenta() {
    long cPtr = opensimModelJNI.Magenta_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getPurple() {
    long cPtr = opensimModelJNI.Purple_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getCyan() {
    long cPtr = opensimModelJNI.Cyan_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static Vec3 getWhite() {
    long cPtr = opensimModelJNI.White_get();
    return (cPtr == 0) ? null : new Vec3(cPtr, false);
  }

  public static int getArray_CAPMIN() {
    return opensimModelJNI.Array_CAPMIN_get();
  }

  public static String getObjectDEFAULT_NAME() {
    return opensimModelJNI.ObjectDEFAULT_NAME_get();
  }

  public static int getStorage_DEFAULT_CAPACITY() {
    return opensimModelJNI.Storage_DEFAULT_CAPACITY_get();
  }

  public static int getIO_STRLEN() {
    return opensimModelJNI.IO_STRLEN_get();
  }

  public static int getPointKinematicsNAME_LENGTH() {
    return opensimModelJNI.PointKinematicsNAME_LENGTH_get();
  }

  public static int getPointKinematicsBUFFER_LENGTH() {
    return opensimModelJNI.PointKinematicsBUFFER_LENGTH_get();
  }

  public static void setMapCxxExceptionsToJava(boolean value) {
    opensimModelJNI.mapCxxExceptionsToJava_set(value);
  }

  public static boolean getMapCxxExceptionsToJava() {
    return opensimModelJNI.mapCxxExceptionsToJava_get();
  }

}
