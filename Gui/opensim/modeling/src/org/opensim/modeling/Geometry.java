/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.opensim.modeling;

public class Geometry extends Component {
  private long swigCPtr;

  public Geometry(long cPtr, boolean cMemoryOwn) {
    super(opensimModelJNI.Geometry_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  public static long getCPtr(Geometry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        opensimModelJNI.delete_Geometry(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static Geometry safeDownCast(OpenSimObject obj) {
    long cPtr = opensimModelJNI.Geometry_safeDownCast(OpenSimObject.getCPtr(obj), obj);
    return (cPtr == 0) ? null : new Geometry(cPtr, false);
  }

  public void assign(OpenSimObject aObject) {
    opensimModelJNI.Geometry_assign(swigCPtr, this, OpenSimObject.getCPtr(aObject), aObject);
  }

  public static String getClassName() {
    return opensimModelJNI.Geometry_getClassName();
  }

  public OpenSimObject clone() {
    long cPtr = opensimModelJNI.Geometry_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Geometry(cPtr, true);
  }

  public String getConcreteClassName() {
    return opensimModelJNI.Geometry_getConcreteClassName(swigCPtr, this);
  }

  public void copyProperty_scale_factors(Geometry source) {
    opensimModelJNI.Geometry_copyProperty_scale_factors(swigCPtr, this, Geometry.getCPtr(source), source);
  }

  public Vec3 get_scale_factors(int i) {
    return new Vec3(opensimModelJNI.Geometry_get_scale_factors__SWIG_0(swigCPtr, this, i), false);
  }

  public Vec3 upd_scale_factors(int i) {
    return new Vec3(opensimModelJNI.Geometry_upd_scale_factors__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_scale_factors(int i, Vec3 value) {
    opensimModelJNI.Geometry_set_scale_factors__SWIG_0(swigCPtr, this, i, Vec3.getCPtr(value), value);
  }

  public int append_scale_factors(Vec3 value) {
    return opensimModelJNI.Geometry_append_scale_factors(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void constructProperty_scale_factors(Vec3 initValue) {
    opensimModelJNI.Geometry_constructProperty_scale_factors(swigCPtr, this, Vec3.getCPtr(initValue), initValue);
  }

  public Vec3 get_scale_factors() {
    return new Vec3(opensimModelJNI.Geometry_get_scale_factors__SWIG_1(swigCPtr, this), false);
  }

  public Vec3 upd_scale_factors() {
    return new Vec3(opensimModelJNI.Geometry_upd_scale_factors__SWIG_1(swigCPtr, this), false);
  }

  public void set_scale_factors(Vec3 value) {
    opensimModelJNI.Geometry_set_scale_factors__SWIG_1(swigCPtr, this, Vec3.getCPtr(value), value);
  }

  public void copyProperty_Appearance(Geometry source) {
    opensimModelJNI.Geometry_copyProperty_Appearance(swigCPtr, this, Geometry.getCPtr(source), source);
  }

  public Appearance get_Appearance(int i) {
    return new Appearance(opensimModelJNI.Geometry_get_Appearance__SWIG_0(swigCPtr, this, i), false);
  }

  public Appearance upd_Appearance(int i) {
    return new Appearance(opensimModelJNI.Geometry_upd_Appearance__SWIG_0(swigCPtr, this, i), false);
  }

  public void set_Appearance(int i, Appearance value) {
    opensimModelJNI.Geometry_set_Appearance__SWIG_0(swigCPtr, this, i, Appearance.getCPtr(value), value);
  }

  public int append_Appearance(Appearance value) {
    return opensimModelJNI.Geometry_append_Appearance(swigCPtr, this, Appearance.getCPtr(value), value);
  }

  public void constructProperty_Appearance(Appearance initValue) {
    opensimModelJNI.Geometry_constructProperty_Appearance(swigCPtr, this, Appearance.getCPtr(initValue), initValue);
  }

  public Appearance get_Appearance() {
    return new Appearance(opensimModelJNI.Geometry_get_Appearance__SWIG_1(swigCPtr, this), false);
  }

  public Appearance upd_Appearance() {
    return new Appearance(opensimModelJNI.Geometry_upd_Appearance__SWIG_1(swigCPtr, this), false);
  }

  public void set_Appearance(Appearance value) {
    opensimModelJNI.Geometry_set_Appearance__SWIG_1(swigCPtr, this, Appearance.getCPtr(value), value);
  }

  public void constructConnectors() {
    opensimModelJNI.Geometry_constructConnectors(swigCPtr, this);
  }

  public void setFrameName(String name) {
    opensimModelJNI.Geometry_setFrameName(swigCPtr, this, name);
  }

  public String getFrameName() {
    return opensimModelJNI.Geometry_getFrameName(swigCPtr, this);
  }

  public PhysicalFrame getFrame() {
    return new PhysicalFrame(opensimModelJNI.Geometry_getFrame(swigCPtr, this), false);
  }

  public void setDecorativeGeometryTransform(ArrayDecorativeGeometry decorations, State state) {
    opensimModelJNI.Geometry_setDecorativeGeometryTransform(swigCPtr, this, ArrayDecorativeGeometry.getCPtr(decorations), decorations, State.getCPtr(state), state);
  }

  public void setDecorativeGeometryAppearance(DecorativeGeometry decoration) {
    opensimModelJNI.Geometry_setDecorativeGeometryAppearance(swigCPtr, this, DecorativeGeometry.getCPtr(decoration), decoration);
  }

  public void setColor(Vec3 color) {
    opensimModelJNI.Geometry_setColor(swigCPtr, this, Vec3.getCPtr(color), color);
  }

  public Vec3 getColor() {
    return new Vec3(opensimModelJNI.Geometry_getColor(swigCPtr, this), false);
  }

  public void setOpacity(double opacity) {
    opensimModelJNI.Geometry_setOpacity(swigCPtr, this, opacity);
  }

  public double getOpacity() {
    return opensimModelJNI.Geometry_getOpacity(swigCPtr, this);
  }

  public void setRepresentation(Geometry.DisplayPreference rep) {
    opensimModelJNI.Geometry_setRepresentation(swigCPtr, this, rep.swigValue());
  }

  public Geometry.DisplayPreference getRepresentation() {
    return Geometry.DisplayPreference.swigToEnum(opensimModelJNI.Geometry_getRepresentation(swigCPtr, this));
  }

  public boolean isFrameSpecified() {
    return opensimModelJNI.Geometry_isFrameSpecified(swigCPtr, this);
  }

  public void createDecorativeGeometry(ArrayDecorativeGeometry arg0) {
    opensimModelJNI.Geometry_createDecorativeGeometry(swigCPtr, this, ArrayDecorativeGeometry.getCPtr(arg0), arg0);
  }

  public void generateDecorations(boolean fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis) {
    opensimModelJNI.Geometry_generateDecorations(swigCPtr, this, fixed, ModelDisplayHints.getCPtr(hints), hints, State.getCPtr(state), state, ArrayDecorativeGeometry.getCPtr(appendToThis), appendToThis);
  }

  public final static class DisplayPreference {
    public final static Geometry.DisplayPreference Hide = new Geometry.DisplayPreference("Hide", opensimModelJNI.Geometry_Hide_get());
    public final static Geometry.DisplayPreference DrawPoints = new Geometry.DisplayPreference("DrawPoints", opensimModelJNI.Geometry_DrawPoints_get());
    public final static Geometry.DisplayPreference DrawWireframe = new Geometry.DisplayPreference("DrawWireframe", opensimModelJNI.Geometry_DrawWireframe_get());
    public final static Geometry.DisplayPreference DrawSurface = new Geometry.DisplayPreference("DrawSurface", opensimModelJNI.Geometry_DrawSurface_get());
    public final static Geometry.DisplayPreference DrawDefault = new Geometry.DisplayPreference("DrawDefault", opensimModelJNI.Geometry_DrawDefault_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DisplayPreference swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DisplayPreference.class + " with value " + swigValue);
    }

    private DisplayPreference(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DisplayPreference(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DisplayPreference(String swigName, DisplayPreference swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DisplayPreference[] swigValues = { Hide, DrawPoints, DrawWireframe, DrawSurface, DrawDefault };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
