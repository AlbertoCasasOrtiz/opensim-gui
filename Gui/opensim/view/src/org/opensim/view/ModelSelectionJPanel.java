/* -------------------------------------------------------------------------- *
 * OpenSim: ModelSelectionJPanel.java                                         *
 * -------------------------------------------------------------------------- *
 * OpenSim is a toolkit for musculoskeletal modeling and simulation,          *
 * developed as an open source project by a worldwide community. Development  *
 * and support is coordinated from Stanford University, with funding from the *
 * U.S. NIH and DARPA. See http://opensim.stanford.edu and the README file    *
 * for more information including specific grant numbers.                     *
 *                                                                            *
 * Copyright (c) 2005-2017 Stanford University and the Authors                *
 * Author(s): Ayman Habib                                                     *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0          *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */

/*
 * ModelSelectionJPanel.java
 *
 * Created on May 21, 2007, 2:55 PM
 */

package org.opensim.view;

import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import javax.swing.JComboBox;
import org.opensim.modeling.Model;
import org.opensim.modeling.OpenSimObject;
import org.opensim.view.pub.OpenSimDB;

/**
 *
 * @author  Ayman
 */
public class ModelSelectionJPanel extends javax.swing.JPanel implements Observer{
   
   private static String noModelString="No Models";
   /** Creates new form ModelSelectionJPanel */
   public ModelSelectionJPanel() {
      initComponents();
      OpenSimDB.getInstance().addObserver(this);
      update();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabelForCurrentModelComboBox = new javax.swing.JLabel();
        jCurrentModelComboBox = new javax.swing.JComboBox();

        setMaximumSize(new java.awt.Dimension(151, 42));
        setMinimumSize(new java.awt.Dimension(151, 42));
        jLabelForCurrentModelComboBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabelForCurrentModelComboBox.setLabelFor(jCurrentModelComboBox);
        jLabelForCurrentModelComboBox.setText("Model");
        jLabelForCurrentModelComboBox.setMaximumSize(new java.awt.Dimension(37, 42));
        jLabelForCurrentModelComboBox.setMinimumSize(new java.awt.Dimension(37, 42));
        jLabelForCurrentModelComboBox.setPreferredSize(new java.awt.Dimension(37, 42));

        jCurrentModelComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Models" }));
        jCurrentModelComboBox.setToolTipText("Current model");
        jCurrentModelComboBox.setMaximumSize(new java.awt.Dimension(200, 20));
        jCurrentModelComboBox.setMinimumSize(new java.awt.Dimension(200, 20));
        jCurrentModelComboBox.setPreferredSize(new java.awt.Dimension(200, 20));
        jCurrentModelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCurrentModelSelectActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabelForCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabelForCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(jCurrentModelComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

   private void jCurrentModelSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCurrentModelSelectActionPerformed
      Object selected = ((JComboBox)evt.getSource()).getSelectedItem();
      if (selected instanceof String || selected ==null)  // No model
         return;
      Model selectedModel = (Model) selected;
      if (OpenSimDB.getInstance().getCurrentModel()!=selectedModel){
         OpenSimDB.getInstance().deleteObserver(this);
         OpenSimDB.getInstance().setCurrentModel(selectedModel);
         OpenSimDB.getInstance().addObserver(this);
      }
// TODO add your handling code here:
   }//GEN-LAST:event_jCurrentModelSelectActionPerformed
   // This should be invoked only if the user changes model from dropdown   // The events we care about are a model becoming current or a model getting deleted so that there's no more
   // current model'
   public void update(Observable o, Object arg) {
      if (o instanceof OpenSimDB){
         // if current model is being switched due to open/close or change current then
         // update list of coordinates
         if (arg instanceof ModelEvent) {
            final ModelEvent evt = (ModelEvent)arg;
            if (evt.getOperation()==ModelEvent.Operation.SetCurrent){
               update(); // update the list 
               // The reason we get the Model is because otherwise 
               // setSelectedItem triggers another round of DB updates!
               jCurrentModelComboBox.getModel().setSelectedItem(evt.getModel());
            }
            else if (evt.getOperation()==ModelEvent.Operation.Close){
               update();
            }
         } else if (arg instanceof ObjectSetCurrentEvent) {
            // If the current model is being switched due to a change current event,
            // then update the list of models.
            ObjectSetCurrentEvent evt = (ObjectSetCurrentEvent)arg;
            Vector<OpenSimObject> objs = evt.getObjects();
            for (int i=0; i<objs.size(); i++) {
               if (objs.get(i) instanceof Model) {
                  Model currentModel = (Model)objs.get(i);
                  update(); // update the list 
                  // The reason we get the Model is because otherwise 
                  // setSelectedItem triggers another round of DB updates!
                  jCurrentModelComboBox.getModel().setSelectedItem(currentModel);
                  break;
               }
            }
         } else if (arg instanceof ObjectsAddedEvent) {
            //update();
         }
      }
  }

   private void update() {
      Object[] models = OpenSimDB.getInstance().getAllModels();
      jCurrentModelComboBox.setEnabled(models.length!=0);
      if (models.length==0){
         jCurrentModelComboBox.removeAllItems();
         jCurrentModelComboBox.addItem(noModelString);
         // disable components
         jLabelForCurrentModelComboBox.setEnabled(false);
         jCurrentModelComboBox.setEnabled(false);
      }
      else {
         // Populate
         jCurrentModelComboBox.removeAllItems();
         for(int i=0; i<models.length; i++){
            jCurrentModelComboBox.addItem((Model)models[i]);
         }
         // enable components
         jLabelForCurrentModelComboBox.setEnabled(true);
         jCurrentModelComboBox.setEnabled(true);
      }
   }
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCurrentModelComboBox;
    private javax.swing.JLabel jLabelForCurrentModelComboBox;
    // End of variables declaration//GEN-END:variables

}
