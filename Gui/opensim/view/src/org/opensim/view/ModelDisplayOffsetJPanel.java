/* -------------------------------------------------------------------------- *
 * OpenSim: ModelDisplayOffsetJPanel.java                                     *
 * -------------------------------------------------------------------------- *
 * OpenSim is a toolkit for musculoskeletal modeling and simulation,          *
 * developed as an open source project by a worldwide community. Development  *
 * and support is coordinated from Stanford University, with funding from the *
 * U.S. NIH and DARPA. See http://opensim.stanford.edu and the README file    *
 * for more information including specific grant numbers.                     *
 *                                                                            *
 * Copyright (c) 2005-2017 Stanford University and the Authors                *
 * Author(s): Ayman Habib                                                     *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0          *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */

/*
 * ModelDisplayOffsetJPanel.java
 *
 * Created on May 8, 2007, 4:04 PM
 */

package org.opensim.view;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.opensim.modeling.Model;
import org.opensim.modeling.Vec3;
import org.opensim.threejs.ModelVisualizationJson;
import org.opensim.view.pub.ViewDB;

/**
 *
 * @author  Ayman, A class that backs the model/display-edit functionality where
 * users can change display properties of a model and change its offset.
 *  Note: Sliders are kept in model units and the transforms are in model units
 * When sending to/from visualizer apply scaleFactor
 */
public class ModelDisplayOffsetJPanel extends javax.swing.JPanel 
                                      implements ChangeListener{
    
    private ModelVisualizationJson modelJson;
    
    private Model dModel;
    private Vec3 initialOffset;
    private Vec3 backupOffset;
    /** Creates new form ModelDisplayOffsetJPanel */
    public ModelDisplayOffsetJPanel(Model abstractModel) {
        // send message to visulaizer to get offset
        modelJson = ViewDB.getInstance().getModelVisualizationJson(abstractModel);
        this.dModel = abstractModel;

        initialOffset = modelJson.getTransformWRTScene().p();
        backupOffset = new Vec3(initialOffset);
        //
        initComponents();
        
        // Compute bounds and initialize text fields for offsets
        computeDisplacementBounds();
        
        textSliderJPanel1.addChangeListener(this);
        textSliderJPanel2.addChangeListener(this);
        textSliderJPanel3.addChangeListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jPanel1 = new javax.swing.JPanel();
      jLabel3 = new javax.swing.JLabel();
      textSliderJPanel1 = new org.opensim.view.TextSliderJPanel();
      jLabel4 = new javax.swing.JLabel();
      textSliderJPanel2 = new org.opensim.view.TextSliderJPanel();
      textSliderJPanel3 = new org.opensim.view.TextSliderJPanel();
      jLabel5 = new javax.swing.JLabel();

      jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      jLabel3.setText("Offset X");

      jLabel4.setText("Offset Y");

      jLabel5.setText("Offset Z");

      org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jPanel1Layout.createSequentialGroup()
                  .add(jLabel4)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(textSliderJPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
               .add(jPanel1Layout.createSequentialGroup()
                  .add(jLabel3)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(textSliderJPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
               .add(jPanel1Layout.createSequentialGroup()
                  .add(jLabel5)
                  .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                  .add(textSliderJPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jLabel3)
               .add(textSliderJPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(14, 14, 14)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(textSliderJPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jLabel4))
            .add(14, 14, 14)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(textSliderJPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jLabel5))
            .add(23, 23, 23))
      );

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
      );
   }// </editor-fold>//GEN-END:initComponents
    
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JPanel jPanel1;
   private org.opensim.view.TextSliderJPanel textSliderJPanel1;
   private org.opensim.view.TextSliderJPanel textSliderJPanel2;
   private org.opensim.view.TextSliderJPanel textSliderJPanel3;
   // End of variables declaration//GEN-END:variables
    /**
     * Callback when slide is moved 
     **/
    public void stateChanged(ChangeEvent e) {
        // Since offset value is now off "current" value, we only apply the difference
        // between currentValue and last saved one.
        
        Vec3 offsetVec3 = modelJson.getTransformWRTScene().p();
        if (e.getSource().equals(textSliderJPanel1.getJXSlider())){
            //offset.SetElement(0, 3, textSliderJPanel1.getTheValue());
            double newValue = textSliderJPanel1.getTheValue();
            offsetVec3.set(0, newValue);
        } else if (e.getSource().equals(textSliderJPanel2.getJXSlider())){
            //offset.SetElement(1, 3, textSliderJPanel2.getTheValue());
            double newValue = textSliderJPanel2.getTheValue();
            offsetVec3.set(1, newValue);
        } else if (e.getSource().equals(textSliderJPanel3.getJXSlider())){
            double newValue = textSliderJPanel3.getTheValue();
            //offset.SetElement(2, 3, textSliderJPanel3.getTheValue());
             offsetVec3.set(2, newValue);
       }
        // Apply transform on screen
        // pass offsetVec3 to ViewDB to apply it
        //ViewDB.getInstance().setModelVisualsTransform(rep, offset);
        ViewDB.getInstance().setModelOffset(modelJson, offsetVec3);
        
    }
    /** Make up bounds for displacement. Initially it's 3 times the size of the bounding 
     * box of the scene so that the user can move everything out of intersection.
     * This may need to be tuned. When a motion is going to be applied, the user needs
     * to keep this in mind */
    private void computeDisplacementBounds() {
          double[] bounds = ViewDB.getInstance().getSceneBounds();
          
          // Modify bounds to make the sliders ceneter around 0
          for(int i=0; i<3; i++){
              double max=Math.max(Math.abs(bounds[2*i]), Math.abs(bounds[2*i+1]));
              bounds[2*i] = -max;
              bounds[2*i+1] =max;
          }
          
          // map bounds to range 0-100 for Slider
            double range = bounds[1] - bounds[0];
            textSliderJPanel1.setRange(bounds[0], bounds[1]);
            textSliderJPanel1.setInitialValue(initialOffset.get(0));
            range = bounds[3] - bounds[2];
            textSliderJPanel2.setRange(bounds[2], bounds[3]);
            textSliderJPanel2.setInitialValue(initialOffset.get(1));
            range = bounds[5] - bounds[4];
            textSliderJPanel3.setRange(bounds[4], bounds[5]);
            textSliderJPanel3.setInitialValue(initialOffset.get(2));
     }

    public void restore() {
        for (int i=0; i<3;i++)
            modelJson.getTransformWRTScene().p().set(i, backupOffset.get(i));
        ViewDB.getInstance().setModelOffset(modelJson, backupOffset);
        
    }
    
}
