/* -------------------------------------------------------------------------- *
 * OpenSim: ExcitationsGridJPanel.java                                        *
 * -------------------------------------------------------------------------- *
 * OpenSim is a toolkit for musculoskeletal modeling and simulation,          *
 * developed as an open source project by a worldwide community. Development  *
 * and support is coordinated from Stanford University, with funding from the *
 * U.S. NIH and DARPA. See http://opensim.stanford.edu and the README file    *
 * for more information including specific grant numbers.                     *
 *                                                                            *
 * Copyright (c) 2005-2017 Stanford University and the Authors                *
 * Author(s): Ayman Habib                                                     *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0          *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */

/*
 * ExcitationsGridJPanel.java
 *
 * Created on February 12, 2008, 3:59 PM
 */

package org.opensim.view.excitationEditor;

import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JPanel;
import org.opensim.modeling.ControlLinear;
import org.opensim.modeling.ControlSet;
import org.opensim.modeling.XYFunctionInterface;

/**
 *
 * @author  Ayman
 */
public class ExcitationsGridJPanel extends JPanel {
    private ControlSet controlSet;
    ArrayList<ExcitationColumnJPanel> excitationColumns = new ArrayList<ExcitationColumnJPanel>(2);
    
    /**
     * Creates new form ExcitationsGridJPanel
     */
    public ExcitationsGridJPanel() {
        initComponents();
        doLayout();
        //excitationColumns.add(excitationColumnJPanel1);
        setPreferredSize(new Dimension(200, 300));
    }

    public void addColumn(String colLabel) {
        // Append one Excitation column to the end by default
        ExcitationColumnJPanel newColumn = new ExcitationColumnJPanel();
        newColumn.setLabel(colLabel);
        excitationColumns.add(newColumn);
        add(newColumn);
        //doLayout();
        validate();
    }
    
    public void removeColumn(ExcitationColumnJPanel aColumn) {
        excitationColumns.remove(aColumn);
        this.remove(aColumn);
        validate();
    }
    
    public ExcitationColumnJPanel getExcitationColumn(int col)
    {
        assert(col <excitationColumns.size());
        return excitationColumns.get(col);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        excitationColumnJPanel1 = new org.opensim.view.excitationEditor.ExcitationColumnJPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        setMaximumSize(new java.awt.Dimension(200, 300));
        setMinimumSize(new java.awt.Dimension(200, 300));
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.opensim.view.excitationEditor.ExcitationColumnJPanel excitationColumnJPanel1;
    // End of variables declaration//GEN-END:variables

    void removePanel(int row, int column) {
        getExcitationColumn(column).removePanel(row);
    }

    void exchangePlots(int row1, int row2, int col) {
        excitationColumns.get(col).exchange(row1, row2);
    }
    
    void addExcitationPanel(int j, ExcitationPanel excPanel, ControlLinear excitation, Vector<XYFunctionInterface> functions) {
        excitationColumns.get(j).append(excPanel, excitation, functions);
    }

    void addColumn(String[] selNames) {
        // Append one Excitation column to the end by default
        ExcitationColumnJPanel newColumn = new ExcitationColumnJPanel(selNames);
        excitationColumns.add(newColumn);
        add(newColumn);
        doLayout();
        validate();
    }

    public ControlSet getControlSet() {
        return controlSet;
    }

    public void setControlSet(ControlSet controlSet) {
        this.controlSet = controlSet;
    }

    void applyValueToSelectedNodes(double valueDouble) {
        for(int i=0; i<excitationColumns.size(); i++)
            excitationColumns.get(i).applyValueToSelectedNodes(valueDouble);
    }

    void removeSelectedNodes() {
        for(int i=0; i<excitationColumns.size(); i++)
            excitationColumns.get(i).removeSelectedNodes();
    }

    void removePanel(int idx, ExcitationPanel functionPanel) {
        getExcitationColumn(idx).removePanel(functionPanel);
    }

    public String toString() {
        return "Excitation Columns";
    }
    public int getNumColumns() {
        return excitationColumns.size();
    }
    
    public ExcitationColumnJPanel getColumn(int index) {
        return excitationColumns.get(index);
    }
    /** Delegate calls to individual panels */
    void backup() {
        for (int i=0; i<excitationColumns.size(); i++)
            getExcitationColumn(i).backup();
    }
    void restore() {
        for (int i=0; i<excitationColumns.size(); i++){
            getExcitationColumn(i).restore();
        }
    }

    void showBaseShape(int series, boolean b) {
        // Delegate the call
        for (int i=0; i<excitationColumns.size(); i++)
            getExcitationColumn(i).showBaseShape(series, b);
    }

    void toggleMinMaxShading(boolean b) {
        // Delegate the call
        for (int i=0; i<excitationColumns.size(); i++)
            getExcitationColumn(i).toggleMinMaxShading(b);
    }
}
