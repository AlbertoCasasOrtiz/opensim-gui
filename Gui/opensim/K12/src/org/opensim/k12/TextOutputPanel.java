/* -------------------------------------------------------------------------- *
 * OpenSim: TextOutputPanel.java                                              *
 * -------------------------------------------------------------------------- *
 * OpenSim is a toolkit for musculoskeletal modeling and simulation,          *
 * developed as an open source project by a worldwide community. Development  *
 * and support is coordinated from Stanford University, with funding from the *
 * U.S. NIH and DARPA. See http://opensim.stanford.edu and the README file    *
 * for more information including specific grant numbers.                     *
 *                                                                            *
 * Copyright (c) 2005-2017 Stanford University and the Authors                *
 * Author(s): Ayman Habib                                                     *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0          *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */
/*
 * TextOutputPanel.java
 *
 * Created on August 19, 2010, 10:23 AM
 */

package org.opensim.k12;

import java.text.DecimalFormat;
import org.opensim.modeling.Analysis;
import org.opensim.modeling.AnalysisSet;
import org.opensim.modeling.ArrayStorage;
import org.opensim.modeling.Model;
import org.opensim.modeling.Storage;

/**
 *
 * @author  ayman
 */
public class TextOutputPanel extends javax.swing.JPanel implements LabOutputInterface {
    private String quantitySpecfication;
    private String htmlText="result: ____";
    private Storage sourceStorage=null;
    private int columnIndex=-1;
    
    /** Creates new form TextOutputPanel */
    public TextOutputPanel(LabOutputTextToPanel textDisplay) {
        initComponents();
        htmlText=textDisplay.getHtmlTemplate().replaceAll("\\[","<");
        htmlText=htmlText.replaceAll("\\]", ">");
        quantitySpecfication=textDisplay.getQuantitySpecfication();
        resultLabel.setText(htmlText);
        validate();
    }

    public String getQuantitySpecfication() {
        return quantitySpecfication;
    }

    public void setQuantitySpecfication(String quantitySpecfication) {
        this.quantitySpecfication = quantitySpecfication;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        resultLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultLabel.setText("jLabel1");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultLabel)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void updateDisplay(double aT) {
        
        DecimalFormat df= new DecimalFormat("#.###");
        int timeIndex = sourceStorage.findIndex(aT);
        double value = sourceStorage.getStateVector(timeIndex).getData().getitem(columnIndex);
        String newValue = df.format(value);
        String newLabel = htmlText.replaceAll("____", newValue);
        resultLabel.setText(newLabel);
        validate();
    }    

    public void setHtmlText(String htmlText) {
        this.htmlText = htmlText;
        resultLabel.setText(htmlText.replaceAll("____", " "));
        validate();
    }

    public void connectQuantityToSource(Model model) {
        // keep a reference to Storage, column to obtain data quickly wile running
        String[] specs=quantitySpecfication.split("\\.");
        AnalysisSet as = model.getAnalysisSet();
        boolean found = false;
        if (as!=null && as.getSize()>0){
            String anName = specs[0];
            if (!as.contains(specs[0])) return;
            Analysis a= as.get(specs[0]);
            if (a != null && specs.length>=1){
                ArrayStorage storages=a.getStorageList();
                for(int idx=0; idx<storages.getSize(); idx++){
                    String dName = storages.get(idx).getName();
                }
                sourceStorage = storages.get(specs[1]);
                if (sourceStorage!=null && specs.length>=2){
                    columnIndex = sourceStorage.getColumnLabels().findIndex(specs[2])-1;
                }
            }
        }
        
        
        int d=0;
    }

    public void cleanup() {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel resultLabel;
    // End of variables declaration//GEN-END:variables
    
}
