/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.opensim.topologyEditor;

import java.awt.BorderLayout;
import java.awt.Color;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JScrollPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.action.EditProvider;
import org.netbeans.api.visual.action.TwoStateHoverProvider;
import org.netbeans.api.visual.action.WidgetAction;
import org.netbeans.api.visual.graph.layout.GraphLayout;
import org.netbeans.api.visual.graph.layout.GraphLayoutFactory;
import org.netbeans.api.visual.graph.layout.GraphLayoutSupport;
import org.netbeans.api.visual.layout.LayoutFactory;
import org.netbeans.api.visual.layout.SceneLayout;
import org.netbeans.api.visual.widget.LabelWidget;
import org.netbeans.api.visual.widget.Widget;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.opensim.modeling.Body;
import org.opensim.modeling.BodySet;
import org.opensim.modeling.Joint;
import org.opensim.modeling.Model;
import org.opensim.view.pub.OpenSimDB;
import org.opensim.view.pub.ViewDB;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.opensim.graphlEditor//visualTopComponent//EN",
autostore = false)
@TopComponent.Description(preferredID = "visualTopComponentTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.opensim.graphlEditor.visualTopComponentTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_visualTopComponentAction",
preferredID = "visualTopComponentTopComponent")
public final class topologyEditorTopComponent extends TopComponent implements Observer {
    ModelGraphScene scene;
    GraphLayout<String,String> graphLayout = GraphLayoutFactory.createTreeGraphLayout (50, 50, 25, 20, true);
 
    public topologyEditorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(topologyEditorTopComponent.class, "CTL_visualTopComponentTopComponent"));
        setToolTipText(NbBundle.getMessage(topologyEditorTopComponent.class, "HINT_visualTopComponentTopComponent"));
        populateDefault();
        OpenSimDB.getInstance().addObserver(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void populateDefault() {
        setLayout(new BorderLayout());

        scene = new ModelGraphScene();
        GraphLayoutSupport.setTreeGraphLayoutRootNode (graphLayout, "ground");
        final SceneLayout sceneGraphLayout = LayoutFactory.createSceneGraphLayout (scene, graphLayout);
        
        WidgetAction hoverAction = ActionFactory.createHoverAction (new MyHoverProvider ());
        scene.getActions().addAction (hoverAction);
        Model currentModel = OpenSimDB.getInstance().getCurrentModel();
        if (currentModel == null) return;
        BodySet bods = currentModel.getBodySet();
        int numBodies = bods.getSize();
        for (int b=0; b<numBodies; b++ ){
            Body bod = bods.get(b);
            //LabelWidget bodyWidget= new LabelWidget(scene, "Body:"+bod.getName());
            Widget bodyWidget = scene.addNode(bod.getName());
            //bodyWidget.setPreferredLocation (new Point (b*30, b*50));
            bodyWidget.getActions().addAction (hoverAction);
            if(bod.hasJoint()){
                Joint jnt = bod.getJoint();
                Widget jntWidget = scene.addNode(jnt.getName());
                jntWidget.setBorder(ModelGraphScene.getBORDER_0());
                //String edgeID = bod.getJoint().getName();
                String jntToParent = bod.getJoint().getParentName() + "_"+jnt.getName();
                scene.addEdge(jntToParent);
                scene.setEdgeSource (jntToParent, bod.getJoint().getParentName());
                scene.setEdgeTarget (jntToParent, jnt.getName());
                String jntToChild = jnt.getName() + "_"+bod.getName();
                scene.addEdge(jntToChild);
                scene.setEdgeSource (jntToChild, jnt.getName());
                scene.setEdgeTarget (jntToChild, bod.getName());
            }
        }
        //SceneSupport.show (scene);
        //scene.createBirdView();
        JScrollPane sPane = new JScrollPane(scene.createView());
        add(sPane, BorderLayout.CENTER); 
        //add(scene.createSatelliteView(), BorderLayout.EAST); 
 
        sceneGraphLayout.invokeLayoutImmediately ();
        scene.validate();
        scene.getActions ().addAction (ActionFactory.createEditAction (new EditProvider() {
            public void edit (Widget widget) {
                // new implementation
                sceneGraphLayout.invokeLayoutImmediately ();
                // old implementation
//                new TreeGraphLayout<String, String> (TreeGraphLayoutTest.this, 100, 100, 50, 50, true).layout ("root");
            }
        }));

    }

    @Override
    public void update(Observable o, Object o1) {
        scene.removeChildren();
        populateDefault();
    }
   private static class MyHoverProvider implements TwoStateHoverProvider {

        public void unsetHovering(Widget widget) {
            if (widget != null) {
                widget.setBackground (Color.WHITE);
                widget.setForeground (Color.BLACK);
                LabelWidget selected = ((LabelWidget)widget);
                Body b = OpenSimDB.getInstance().getCurrentModel().getBodySet().get(selected.getLabel());
                ViewDB.getInstance().removeObjectFromSelectedList(b);
            }
        }

        public void setHovering(Widget widget) {
            if (widget != null) {
                widget.setBackground (new Color (52, 124, 150));
                widget.setForeground (Color.RED);
                LabelWidget selected = ((LabelWidget)widget);
                Body b = OpenSimDB.getInstance().getCurrentModel().getBodySet().get(selected.getLabel());
                ViewDB.getInstance().replaceSelectedObject(b);
            }
        }

    }
}
